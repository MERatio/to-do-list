{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/Options.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","todo","id","text","isComplete","handleStatusChange","handleTextChange","handleDelete","classes","className","onClick","title","TodoList","todos","map","key","Options","filterType","changeFilterType","handleReset","AddTodo","handleInputChange","e","setState","target","value","state","handleSubmit","bind","preventDefault","this","addNewTodo","onSubmit","type","onChange","placeholder","minLength","maxLength","Component","App","JSON","parse","localStorage","getItem","updateTodos","setItem","stringify","newTodo","uuid","v4","forEach","newText","window","prompt","filter","length","confirm","filteredData","todosLeft","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af9de47e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Todo(props) {\n  // Destructure props\n  const { id, text, isComplete } = props.todo;\n  const { handleStatusChange, handleTextChange, handleDelete } = props;\n\n  // Styling of a todo depending if it is completed or not\n  let classes = isComplete\n    ? ['circle-check far fa-check-circle fa-2x', 'todo-text todo-text-complete']\n    : ['circle-ongoing far fa-circle fa-2x', 'todo-text todo-text-ongoing'];\n\n  return (\n    <li className=\"todo\">\n      <button className=\"btn btn-circle\" onClick={() => handleStatusChange(id)}>\n        <i className={classes[0]}></i>\n      </button>\n      <p className={classes[1]} onClick={() => handleStatusChange(id)}>\n        {text}\n      </p>\n      <button\n        className=\"btn btn-update\"\n        onClick={() => handleTextChange(id)}\n        title=\"Change text\"\n      >\n        <i className=\"fas fa-edit fa-2x\"></i>\n      </button>\n      <button\n        className=\"btn btn-delete\"\n        onClick={() => handleDelete(id)}\n        title=\"Delete\"\n      >\n        <i className=\"fas fa-trash fa-2x\"></i>\n      </button>\n    </li>\n  );\n}\n\n// type check props\nTodo.propTypes = {\n  todo: PropTypes.object.isRequired,\n  handleStatusChange: PropTypes.func.isRequired,\n  handleTextChange: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\nimport PropTypes from 'prop-types';\n\nfunction TodoList(props) {\n  return (\n    <ul className=\"todo-list\">\n      {props.todos.map(todo => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          handleStatusChange={props.handleStatusChange}\n          handleTextChange={props.handleTextChange}\n          handleDelete={props.handleDelete}\n        />\n      ))}\n    </ul>\n  );\n}\n\n// type check props\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  handleStatusChange: PropTypes.func.isRequired,\n  handleTextChange: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Options(props) {\n  const { filterType, changeFilterType, handleReset } = props;\n\n  return (\n    <div className=\"options\">\n      <button\n        className={`btn btn-all option ${\n          filterType === 'all' ? 'option-active' : ''\n        }`}\n        onClick={() => changeFilterType('all')}\n      >\n        All\n      </button>\n      <button\n        className={`btn btn-complete option ${\n          filterType === 'complete' ? 'option-active' : ''\n        }`}\n        onClick={() => changeFilterType('complete')}\n      >\n        Complete\n      </button>\n      <button\n        className={`btn btn-incomplete option ${\n          filterType === 'incomplete' ? 'option-active' : ''\n        }`}\n        onClick={() => changeFilterType('incomplete')}\n      >\n        Incomplete\n      </button>\n      <button className=\"btn btn-delete-all option\" onClick={handleReset}>\n        Delete All\n      </button>\n    </div>\n  );\n}\n\n// type check props\nOptions.propTypes = {\n  filterType: PropTypes.string.isRequired,\n  changeFilterType: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired\n};\n\nexport default Options;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTodo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Change the text in the state of AddTodo depending on the value of the input field\n  handleInputChange = e => this.setState({ text: e.target.value });\n\n  // Handle submition of the form\n  handleSubmit(e) {\n    e.preventDefault();\n    const { text } = this.state;\n    if (!text) return;\n    this.props.addNewTodo(text);\n    this.setState({ text: '' });\n  }\n\n  render() {\n    return (\n      <form className=\"add-todo\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input-todo\"\n          onChange={this.handleInputChange}\n          value={this.state.text}\n          placeholder=\"Add a to-do\"\n          minLength=\"1\"\n          maxLength=\"22\"\n        />\n        <button type=\"submit\" className=\"btn btn-submit\">\n          <i className=\"fas fa-plus-circle fa-3x\"></i>\n        </button>\n      </form>\n    );\n  }\n}\n\nAddTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired\n};\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport TodoList from './components/TodoList';\nimport Options from './components/Options';\nimport AddTodo from './components/AddTodo';\nimport uuid from 'uuid'; // For generating random id\nimport './App.scss'; // Just install node-sass and create-react-app will parse sass to css (and add vendor prefixes)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: JSON.parse(localStorage.getItem('todos')) || [], // If there is no todos in the localStorage(coerce to false), set the todos into empty array\n      filterType: 'all'\n    };\n    this.updateTodos = this.updateTodos.bind(this);\n    this.addNewTodo = this.addNewTodo.bind(this);\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.changeFilterType = this.changeFilterType.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  // Update the localStorage and the todos in the state\n  updateTodos(todos) {\n    localStorage.setItem('todos', JSON.stringify(todos)); // localStorage only accepts string\n    this.setState({ todos }); // Updating the localStorage does not re-render React component\n  }\n\n  // Get the text from the and add a new todo\n  addNewTodo(text) {\n    let { todos } = this.state;\n    const newTodo = {\n      id: uuid.v4(),\n      text,\n      isComplete: false\n    };\n    todos = [...todos, newTodo];\n    this.updateTodos(todos);\n  }\n\n  // Handle the change of isComplete in the state\n  handleStatusChange(id) {\n    let { todos } = this.state;\n    todos.forEach(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n        this.updateTodos(todos);\n        return;\n      }\n    });\n  }\n\n  // Change the text of a todo\n  handleTextChange(id) {\n    let newText = window.prompt('Input a new text', '');\n    if (!newText) return;\n    let { todos } = this.state;\n    todos.forEach(todo => {\n      if (todo.id === id) {\n        todo.text = newText;\n        this.updateTodos(todos);\n        return;\n      }\n    });\n  }\n\n  // Handle deletion of a todo\n  handleDelete(id) {\n    let { todos } = this.state;\n    todos = todos.filter(todo => todo.id !== id);\n    this.updateTodos(todos);\n  }\n\n  changeFilterType(filterType) {\n    this.setState({ filterType });\n  }\n\n  // Delete all todos in the localStorage and state\n  handleReset() {\n    if (this.state.todos.length < 1) return;\n    let confirm = window.confirm('Do you really want to delete all todos?');\n    return confirm ? this.updateTodos([]) : null;\n  }\n\n  render() {\n    let { todos, filterType } = this.state;\n    let filteredData;\n\n    let todosLeft = 0;\n\n    todos.forEach(todo => {\n      if (!todo.isComplete) todosLeft++;\n    });\n\n    // Show the todos depending on the filterType\n    switch (filterType) {\n      case 'all':\n        filteredData = todos;\n        break;\n      case 'complete':\n        filteredData = todos.filter(todo => todo.isComplete);\n        break;\n      case 'incomplete':\n        filteredData = todos.filter(todo => !todo.isComplete);\n        break;\n      default:\n        filteredData = todos;\n    }\n\n    return (\n      <main className=\"app\">\n        <div className=\"container\">\n          <TodoList\n            todos={filteredData}\n            handleStatusChange={this.handleStatusChange}\n            handleTextChange={this.handleTextChange}\n            handleDelete={this.handleDelete}\n          />\n          <Options\n            filterType={filterType}\n            changeFilterType={this.changeFilterType}\n            handleReset={this.handleReset}\n          />\n          <div className=\"bottom\">\n            <AddTodo addNewTodo={this.addNewTodo} />\n            <div className=\"todos-left\">\n              <p className=\"todos-left-text\">{`${todosLeft} to-dos left`}</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}